{"data":{"markdownRemark":{"html":"<p>Occasionally I’ll pick up smaller development jobs outside of work. Usually\nthese jobs follow a standard template: WordPress on shared hosting with a theme\nalready in place. And up until now, my workflow for these jobs looked similar:\nspin up a new WordPress instance, download their theme, create a child theme,\nthen copy the result to the shared server via FTP. But it’s 2017, we can do\nbetter than that! For this most recent job, I decided to utilize git’s hook\nfeatures to automate deployment using a better (and safer) workflow.</p>\n<p>After reading, you will be able to update your website with a simple <code class=\"language-text\">git push\nproduction master</code>!</p>\n<h2>Prelinary setup - shared hosting SSH access</h2>\n<p>First, you’ll need to have SSH access to your shared hosting environment. This\nis available on most sites under “Home > Security > SSH Access” in cPanel.\nYou’ll need to add a new key; I won’t go over that here, but GitHub has a great\nhow-to on <a href=\"https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/\">generating a new SSH key</a>.</p>\n<p>After following the how-to on generating a new SSH key, add the public key to\ncPanel’s SSH Access. If you’re on a mac, here’s an easy command to copy your\nnewly generated SSH key to the clipboard:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> ~/.ssh/id_rsa.pub <span class=\"token operator\">|</span> pbcopy</code></pre></div>\n<p>Now that the key is copied, in cPanel, click “Import key”, and paste the public\nkey into the appropriate text box. Note that you don’t need the private key for\nthis deployment. I’d also recommend naming the key something like “id_rsa.pub”</p>\n<h2>Server setup</h2>\n<p>For this part, we’re going be working with these two directories on our server:</p>\n<ul>\n<li>Server site: <code class=\"language-text\">$HOME/public_html/site.com</code></li>\n<li>Server git repository: <code class=\"language-text\">$HOME/vcs/site.git</code></li>\n</ul>\n<p>Now that you’ve got SSH access, you should be able to connect to your shared\nhosting server via the command line. try it now; connect to the server using\nyour login name and the server’s IP using SSH:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> name@1.1.1.1</code></pre></div>\n<h3>Creating the repository</h3>\n<p>On the command line, type the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cd</span> <span class=\"token variable\">$HOME</span>\n<span class=\"token function\">mkdir</span> -p vcs/site.git <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">cd</span> vcs/site.git\n<span class=\"token function\">git</span> init --bare</code></pre></div>\n<p>Using the git command <code class=\"language-text\">--bare</code> means the folder will only contain version\ncontrol about our site.</p>\n<h3>Creating the hook</h3>\n<p>Git provides hooks to run commands after certain tasks have been completed. Its\ndocumentation isn’t that great, but DigitalOcean have done a great job of\ndocumenting things on <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-git-hooks-to-automate-development-and-deployment-tasks\">using git hooks to automate development and deployment\ntasks here</a>. The git hook we’re interested in is <code class=\"language-text\">post-commit</code>.</p>\n<p>On the command line (assuming we are still in the <code class=\"language-text\">/var/vcs/site.git</code> folder),\nrun the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> <span class=\"token operator\">></span> post-receive\n<span class=\"token comment\">#!/bin/sh</span>\n<span class=\"token function\">git</span> --work-tree<span class=\"token operator\">=</span><span class=\"token variable\">$HOME</span>/public_html/site.com --git-dir<span class=\"token operator\">=</span><span class=\"token variable\">$HOME</span>/vcs/site.git checkout -f</code></pre></div>\n<p>After writing this, press “Control-d” to save. Now set proper permissions so the\ngit hook can be executed:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> +x post-receive</code></pre></div>\n<p>This <code class=\"language-text\">post-receive</code> hook does all the heavy lifting for our deployment. It is\nrun every time files get pushed to the <code class=\"language-text\">/var/vcs/site.git</code> repository, and\n<code class=\"language-text\">work-tree</code> defines where the files will be transferred to. The <code class=\"language-text\">checkout-f</code>\ncommand ensures our old files will be overwritten on successful push.</p>\n<h2>Our local site</h2>\n<p>Locally, the only thing that needs to be done is add the remote path of the\nproduction website to our repository. I’ll assume you’ve already got a local\nfolder for <code class=\"language-text\">site.com</code>, and all files are checked in and committed. On the\ncommand line, after <code class=\"language-text\">cd</code>ing into the correct directory, run the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote add production ssh://name@1.1.1.1/~/vcs/site.git</code></pre></div>\n<p>Notice the <code class=\"language-text\">~</code> tilde; we have to specify that we want the home folder for our\nuser in the SSH path so we can get to our repository correctly.</p>\n<p>From here, it’s business as usual. Run the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push production master</code></pre></div>\n<p>Your changes will be pushed up to the shared hosting server, and your files will\nbe added to <code class=\"language-text\">$HOME/public_html/site.com</code>!</p>\n<h2>Conclusion</h2>\n<p>This is pretty handy, and is by no means the only thing you can do with git\nhooks. For example, you could write a local <code class=\"language-text\">post-merge</code> hook that SSHes into\nthe production server, creates a database dump, copies it locally and updates\nyour local database, so your local environment is always up-to-date with\nproduction.</p>\n<p>Perhaps the biggest shortcoming of these git hooks is that they cannot be stored\nin version control and shared with teams. This is understandable as they have\nthe potential for remote code execution, but it would be lovely to store an\nentire project’s build process into a tool that’s already being used… I\nsuppose that’s what Jenkins CI is for :)</p>","frontmatter":{"title":"Auto deploy with git","date":"2017-01-23 13:30:30 0500"}}},"pageContext":{"slug":"auto-deploy-with-git","blogpath":"blog/2017/auto-deploy-with-git","type":"blog","jekyllDate":"2017-01-23"}}