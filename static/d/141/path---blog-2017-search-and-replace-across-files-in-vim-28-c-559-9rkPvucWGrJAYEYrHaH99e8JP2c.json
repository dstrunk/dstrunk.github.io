{"data":{"markdownRemark":{"html":"<p>Happy New Year! Let’s get 2017 started right with some Vim tips to increase your\nproductivity when refactoring code on projects. Today we’re focusing on finding\nand replacing across your project directory.</p>\n<p>Vim doesn’t have built-in commands for project-wide search and replace, but it\n<em>does</em> provide the building blocks for us to compose our own.</p>\n<h2>Easy mode: greplace.vim</h2>\n<p>Of course somebody’s already tackled this problem in the vibrant Vim ecosystem;\nYan Pritzker has modified an original plugin by Yegappan Lakshmanan to create a\nfull-featured solution in <a href=\"https://github.com/skwp/greplace.vim\">greplace</a>. I’m basically rehashing\ngreplace’s readme, but to use:</p>\n<ol>\n<li>Type <code class=\"language-text\">:Gsearch</code> along with your search term, hit enter and get a buffer\nwindow full of your search results.</li>\n<li>Make replacements inside this buffer using vim’s familiar\n<code class=\"language-text\">%s/search/replace/</code>.</li>\n<li>Call <code class=\"language-text\">:Greplace</code> to make changes across all files.</li>\n<li>Save changes across all files with <code class=\"language-text\">:wall</code></li>\n</ol>\n<p>This solution is great for me, and somewhat replaces the one thing I miss most\nabout emacs: dired.</p>\n<p>If you’re a glutton for punishment, and are looking for the manual way to find\nand replace across a project in Vim, look no further than below.</p>\n<h1>Hard mode: full manual</h1>\n<p>Honestly, hard mode isn’t too hard nowadays. Before, <a href=\"http://vimcasts.org/episodes/project-wide-find-and-replace/\">vimcasts</a> had an\nentire episode dedicated to find and replace across projects, with the best\noption involving a bit of vimscript to allow for writing only to files that\ncontained the search results (instead of writing to every file within the\nproject).</p>\n<p>With the introduction of Vim 8, we now have the ability to iterate over our\nquickfix window and make changes (essentially what <code class=\"language-text\">greplace</code> was doing above).\nHere’s an example to show what I mean:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">:arga **/*\n:grep<span class=\"token operator\">!</span> /Old/g <span class=\"token comment\">##</span>\n:cdo %s/Old/New/ge <span class=\"token operator\">|</span> update</code></pre></div>\n<p>The first command, <code class=\"language-text\">:arga **/*</code>, adds every file in the directory to the\narguments list. The next line, <code class=\"language-text\">:grep! /new/g ##</code>, adds every instance of our\nsearch term, “Old”, into the quickfix (I’m using <code class=\"language-text\">grep!</code> with the bang at the\nend so the first instance of the search doesn’t get opened). Last we have the\nnew <code class=\"language-text\">:cdo %s/Old/New/ge | update</code>. <code class=\"language-text\">:cdo</code> acts on every file in the quickfix;\nthe <code class=\"language-text\">%s/Old/New/ge</code> searches through these files and replaces globally (the <code class=\"language-text\">e</code>\nat the end supresses errors resulting from not matching in some files), and the\nupdate saves all files found.</p>\n<p>This isn’t too big of a hassle, and can be further simplified with\n<a href=\"https://github.com/mileszs/ack.vim\">ack.vim</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">:Ack foo\n:cdo %s/foo/bar/ge <span class=\"token operator\">|</span> update</code></pre></div>\n<p>Not bad at all!</p>","frontmatter":{"title":"Search and replace across files in Vim","date":"2017-01-09 1:30:00 -0500"}}},"pageContext":{"slug":"search-and-replace-across-files-in-vim","blogpath":"blog/2017/search-and-replace-across-files-in-vim","type":"blog","jekyllDate":"2017-01-09"}}