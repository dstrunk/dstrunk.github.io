{"data":{"markdownRemark":{"html":"<p><a href=\"http://sidigital.co/blog/disconnect-your-frontend-from-wordpress\">This post by Si digital</a> recently detailed their company’s process for using WordPress in a pretty cool way. See, they wanted to continue using WordPress’s admin backend, because it’s user-friendly, people are familiar with it, and existing systems might depend on it. But they found that WordPress’s frontend left something to be desired—they frequently needed more information than <a href=\"codex.wordpress.org/The_Loop\">The Loop</a> could provide, and in a more succinct manner. I went ahead and went a bit further with Si digital’s idea—incorporating PHP’s <a href=\"http://www.slimframework.com/\">Slim framework</a> into Si Digital’s class, allowing for custom routing completely independent of WordPress’s permalink structure. I’m calling the marriage of these two ideas (all tongue-in-cheek punnery intended) <strong>WP Loupe.</strong><a href=\"https://github.com/dstrunk/loupe\"><img src=\"http://res.cloudinary.com/dstrunk/image/upload/v1414083562/loupe_jncexu.png\" alt=\"loupe\"></a> WP Loupe is an extremely simple bit of code that hijacks the WordPress initialization with its own similar init, instantiating a class that can be used to call any function outside of traditional WordPress functions. The folder structure is similar to a more opinionated framework (<em>ahem</em> Rails <em>cough</em>), for ease of maintenance. I’ve got some ideas moving forward, including incorporating a more robust controller and including a PHP templating framework. If you enjoy the WordPress admin structure, but find using the loop a bit painful for some of your more nontraditional WordPress projects, check out WP Loupe: <a href=\"https://github.com/dstrunk/loupe\">WP Loupe</a></p>","frontmatter":{"title":"Custom frontend routing and loop options for WordPress","date":null}}},"pageContext":{"slug":"custom-frontend-routing-and-loop-options-for-wordpress","type":"blog"}}