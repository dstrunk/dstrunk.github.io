{"data":{"markdownRemark":{"html":"<p>It’s a big day today… Apple’s September 9th event, this blog’s 100th post, and perhaps most importantly, my dog Carl’s birthday! To celebrate, we’ll be talking about cleaning up nested forms in Rails with <strong>form objects</strong>.</p>\n<h3>Form Objects</h3>\n<p> As your application grows, your models might tend to get messy. Some people subscribe to the “fat model, skinny controller” viewpoint, but I think that our entire codebase should be easily digestible, and that means refactoring certain functionality out of a catch-all model and into plain ol’ ruby form objects, service objects et al. If you have a form that updates several ActiveRecord models with one submission, you’ve got a good candidate for a form object. Form objects can significantly clean up models that use <code class=\"language-text\">accepts_nested_attributes_for</code> <em>ad nauseum</em>. Before I get started, I should note that I’ll be dealing with Rails 4 for this example. In Rails 4, it’s easy to add ActiveRecord-like attribute functionality to objects by including <code class=\"language-text\">include ActiveModel::Model</code> in your class. That allows you to enjoy AR methods like validation, etc. One thing that tripped me up was getting strong parameters to work with this method. After learning how Rails expects its parameters however (hashes), everything started to Just Work&#x26;tm;. In this example, we’re going to deal with a form that updates both a <code class=\"language-text\">User</code> model that has one <code class=\"language-text\">Profile</code> model in a signup form. First, the models (basic stuff):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class User &lt; AR::Base\n\thas_one :profile\n\tend\n\n\tclass Profile &lt; AR::Base\n\tbelongs_to :user\nend</code></pre></div>\n<ul>\n<li>My <code class=\"language-text\">User</code> model has the following fields: <code class=\"language-text\">:username</code> and <code class=\"language-text\">:email</code>.</li>\n<li>My <code class=\"language-text\">Profile</code> model has the following fields: <code class=\"language-text\">:github</code> and <code class=\"language-text\">:twitter</code>.</li>\n</ul>\n<p>Now, instead of going the traditional Rails way with an <code class=\"language-text\">accepts_nested_attributes_for :profile</code> in our User model, we’ll extract out the entire form details into a separate <code class=\"language-text\">signup</code> object:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Signup\n\tinclude ActiveModel::Model\n\n\tattr_accessor :username, :email, :twitter, :github\n\n\tvalidates :username, presence: true\n\tvalidates :email, presence: true, email: true\n\tvalidates :twitter, presence: true\n\tvalidates :github, presence: true\n\n\tdef register\n\t\tif valid?\n\t\tcreate_user\n\t\tcreate_profile\n\tend\n\n\tprivate\n\n\tdef create_user\n\t\thash = {}\n\t\thash[:username] = &quot;#{username}&quot;\n\t\thash[:email] = &quot;#{email}&quot;\n\t\t@user ||= User.new(hash)\n\t\t@user.save!\n\tend\n\n\tdef create_profile\n\t\thash = {}\n\t\thash[:twitter] = &quot;#{twitter}&quot;\n\t\thash[:github] = &quot;#{github}&quot;\n\t\t@profile = Profile.new(hash)\n\t\t@user.profile = @profile\n\tend\nend</code></pre></div>\n<h4>Quick notes:</h4>\n<ul>\n<li>Include <code class=\"language-text\">ActiveModel::Model</code> to gain access to traditional AR methods. Quack, quack</li>\n<li><code class=\"language-text\">attr_accessor</code> for the fields we’ll be using</li>\n<li>validations just like we’re used to</li>\n<li>A <code class=\"language-text\">register</code> method that we’re using in our <code class=\"language-text\">SignupsController</code> (called below)</li>\n<li>Our user and profile creation methods</li>\n</ul>\n<p>Let’s take a look at our form. It’s standard stuff, but note that we’re using the object <code class=\"language-text\">@signup</code> given to us by the <code class=\"language-text\">SignupsController</code> (posted below the form):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;%= form_for(@signup) do |f| %&gt;\n\t&lt;% if @signup.errors.any? %&gt;\n\t&lt;div id=&quot;error_explanation&quot;&gt;\n\t&lt;h2&gt;&lt;%= pluralize(@signup.errors.count, &quot;error&quot;) %&gt; prohibited this user from being saved:&lt;/h2&gt;\n\t&lt;ul&gt;\n\t&lt;ul&gt;&lt;% @signup.errors.full_messages.each do |message| %&gt;\n\t    &lt;li&gt;&lt;%= message %&gt;&lt;/li&gt;\n\t&lt;/ul&gt;\n\t&lt;/ul&gt;\n\t&lt;% end %&gt;\n\n\t&lt;/div&gt;\n\t&lt;% end %&gt;\n\t&lt;div class=&quot;field&quot;&gt;&lt;%= f.label :username %&gt;\n\n\t&lt;%= f.text_field :username %&gt;&lt;/div&gt;\n\t&lt;div class=&quot;field&quot;&gt;&lt;%= f.label :email %&gt;\n\n\t&lt;%= f.text_field :email %&gt;&lt;/div&gt;\n\t&lt;div class=&quot;field&quot;&gt;&lt;%= f.label :twitter %&gt;\n\n\t&lt;%= f.text_field :twitter %&gt;&lt;/div&gt;\n\t&lt;div class=&quot;field&quot;&gt;&lt;%= f.label :github %&gt;\n\n\t&lt;%= f.text_field :github %&gt;&lt;/div&gt;\n\t&lt;div class=&quot;actions&quot;&gt;&lt;%= f.submit %&gt;&lt;/div&gt;\n\t&lt;% end %&gt;</code></pre></div>\n<p>From here it’s a simple matter of updating the controller accessing the form:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class SignupsController &lt; ApplicationController\n\trespond_to :html\n\n\tdef new\n\t@signup = Signup.new\n\tend\n\n\tdef create\n\t@signup = Signup.new(signup_params)\n\t@signup.register\n\trespond_with @signup, location: some_location_path\n\tend\n\n\tprivate\n\tdef signup_params\n\tparams.require(:signup).permit(:user, :email, :github, :twitter)\n\tend\n\tend</code></pre></div>\n<p>This should look like something you’re used to. A simple <code class=\"language-text\">create</code> method passing in strong params, then calling the <code class=\"language-text\">register</code> method on the <code class=\"language-text\">@signup</code> object.</p>\n<h4>The end</h4>\n<p> That’s all for today! If you’d like to learn more about cleaning up your fat models, check out this great (if a bit dated) posts from codeclimate: <a href=\"http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/\">7 Ways to Decompose Fat ActiveRecord Models</a>. It’s got great ideas that you should be able to update to work with Rails 4 pretty easily. I’ll close with a picture of Carl, hard at work building out a complex airbnb-type app for dogs: <img src=\"http://res.cloudinary.com/dstrunk/image/upload/v1414083560/2013-09-07-14_24_53-2_sqptrn.jpg\" alt=\"Carl, hard at work.\"> Happy birthday Carl!</p>","frontmatter":{"title":"Cleaning up nested forms with form objects in Rails 4","date":null}}},"pageContext":{"slug":"cleaning-up-nested-forms-with-form-objects-in-rails-4","type":"blog","jekyllDate":"2014-09-09"}}