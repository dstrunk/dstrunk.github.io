{"data":{"markdownRemark":{"html":"<p>I always wondered about the difference between <code class=\"language-text\">:belongs_to</code> vs <code class=\"language-text\">:references</code> when running ActiveRecord migrations, always chalking it up to a quirk in the framework. They do the same thing, right? Well yes, they do <strong>exactly</strong> the same thing, as a matter of fact; take a look at the Rails source:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def references(*args)\n\t  options = args.extract_options!\n\t  polymorphic = options.delete(:polymorphic)\n\t  args.each do |col|\n\t    column(&quot;#{col}_id&quot;, :integer, options)\n\t    column(&quot;#{col}_type&quot;, :string, polymorphic.is_a?(Hash) ? polymorphic : options) unless polymorphic.nil?\n\t  end\n\tend\n\talias :belongs_to :references</code></pre></div>\n<p>But while they do the same thing, they might make your code a lot more readable to others … or at least help you to understand why you’re doing the association in the first place. Consider these two examples:</p>\n<h3>Answers belong_to Questions</h3>\n<p>Say we have two models, <code class=\"language-text\">Question</code> and <code class=\"language-text\">Answer</code>: \t</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Question &lt; AR::Base\n\thas_many :answers\nend\n\nclass Answer &lt; AR::Base\n\tbelongs_to :question\nend</code></pre></div>\n<p>In this case, when creating the <code class=\"language-text\">answer</code> AR migration, it would make sense for me to use <code class=\"language-text\">t.belongs_to :question</code>. From a vernacular standpoint, it’s obvious that an answer instance belongs directly to a question.</p>\n<h3>Questions reference Topics</h3>\n<p>But in a relationship that isn’t strictly “parent and child” per-say, it might make more sense in your brain to use <code class=\"language-text\">references</code>. Again, this is purely from a vernacular standpoint; there are no differences once the table is created. My example uses <code class=\"language-text\">Questions</code> and <code class=\"language-text\">Topics</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Question &lt; AR::Base\n\tbelongs_to :topic\nend\n\nclass Topic &lt; AR::Base\n\thas_many :questions\nend</code></pre></div>\n<p>There’s no difference in the model, but if I were creating the table, I’d use <code class=\"language-text\">t.references :topic</code>. This would help make my migration more readable, and I’d know that <code class=\"language-text\">Topic</code> is probably a more adjacent table that <code class=\"language-text\">Question</code> just happens to need a reference to, instead of being a more “connected”, “parent-child” relationship that might directly affect the child models. I tend to use <code class=\"language-text\">belongs_to</code> most when I’m using models that accept nested attributes for another model. <code class=\"language-text\">reference</code> is more for tenuous relationships that just need to “talk” to another table, or are related via a <code class=\"language-text\">has_many through</code>, personally. Notice all of the qualifiers in this post! The reason for all of the “personally” or “I tend to” is because doesn’t really matter which you use: <code class=\"language-text\">belongs_to</code> or <code class=\"language-text\">references</code>. It might help make your migrations more readable, however. It certainly helps me! Have anything to add? Want to correct me on something? Let me know below!</p>","frontmatter":{"title":"\"references\" vs \"belongs_to\" in ActiveRecord migrations","date":null}}},"pageContext":{"slug":"references-vs-belongs_to-in-activerecord-migrations","type":"blog"}}