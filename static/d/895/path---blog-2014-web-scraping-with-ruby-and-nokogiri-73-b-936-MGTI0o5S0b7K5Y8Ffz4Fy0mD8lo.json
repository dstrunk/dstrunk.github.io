{"data":{"markdownRemark":{"html":"<p><strong>updated on Aug 23, 2016</strong></p>\n<p><em>This article previously referenced Amazon, and had some issues that might have\nbroken for some users. The post has been updated to ensure it works as of Aug\n23, 2016.</em></p>\n<p>If you’re building a site that compares data from different sources, chances are you might find yourself dealing with a couple of sites that don’t have an API. But us web developers, we’re a resourceful bunch, and we won’t let a little thing like a lack of accessible information stop us, right? Right! Before APIs were the norm, an easy way to grab information on the interwebs was through web scraping. If you’re using Ruby, a great library for web scraping is <a href=\"http://nokogiri.org/\">Nokogiri</a>. After reading this article, if you’re interested in a deeper dive through web scraping, I’d suggest reading the Nokogiri documentation; it supports selecting web elements using CSS selectors or XPath, and is pretty robust.</p>\n<h2>Getting started</h2>\n<p>To start, let’s first install Nokogiri. Run the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gem <span class=\"token function\">install</span> nokogiri</code></pre></div>\n<p>This command will install Nokogiri on your system. It’s better to use a Gemfile\nfor installing Ruby libraries, but for this example, installing on our system is\nfine.</p>\n<p>Now we’re going to search through New York’s Craigslist for some results of some\npets in need of adoption. By digging around a bit, we’ve found a URL that will\nreturn the results we’re looking for:\n<code class=\"language-text\">http://newyork.craigslist.org/search/pet?s=0</code>.</p>\n<h2>The scrape</h2>\n<p>So, we’ve got Nokogiri installed, and we’ve got our URL. Let’s get started.\nFirst, create <code class=\"language-text\">craigslist-scrape.rb</code>, then add the following to this file:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">'open-uri'</span>\n<span class=\"token keyword\">require</span> <span class=\"token string\">'nokogiri'</span>\n\nurl <span class=\"token operator\">=</span> <span class=\"token string\">'http://newyork.craigslist.org/search/pet?s=0'</span>\ndoc <span class=\"token operator\">=</span> <span class=\"token constant\">Nokogiri</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">HTML</span><span class=\"token punctuation\">(</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\npets <span class=\"token operator\">=</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.hdrlnk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span>pet<span class=\"token operator\">|</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>pet<span class=\"token punctuation\">.</span>text<span class=\"token delimiter tag\">}</span></span> - <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>pet<span class=\"token punctuation\">.</span><span class=\"token function\">attribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'href'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to_s<span class=\"token delimiter tag\">}</span></span>\"</span> <span class=\"token punctuation\">}</span>\n\nputs pets<span class=\"token punctuation\">[</span><span class=\"token number\">0.</span><span class=\"token number\">.9</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>After adding this to your file, you can try running <code class=\"language-text\">ruby craigslist-scrape.rb</code>.\nThe terminal should output the text of some links, as well as some relative URLs\nthat accompany it so you can save them to a spreadsheet for further tracking:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Please adopt or foster a dog or <span class=\"token function\">cat</span> from the NYACC <span class=\"token function\">kill</span> list today<span class=\"token operator\">!</span><span class=\"token operator\">!</span> - /jsy/pet/5746473654.html\nPoor kitten needs your <span class=\"token function\">help</span> - /brx/pet/5746472508.html\nPlease <span class=\"token function\">help</span> my kitten <span class=\"token keyword\">in</span> need - /fct/pet/5746469771.html\nPlease <span class=\"token function\">help</span> my kitten - /wch/pet/5746466978.html\n6 month old Holland lop needs home today - /brx/pet/5746451660.html\n2 month old kittens - /brx/pet/5746420056.html\nHouse Call Veterinarian - /que/pet/5746418041.html\nTiny pure breed Yorkie/Maltese available - /brk/pet/5746441804.html\nPythons <span class=\"token operator\">&amp;</span> Monitors<span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span> - /mnh/pet/5730797572.html\nlooking to place my pocketpit plus her pups - /mnh/pet/5746399334.html</code></pre></div>\n<p>Here’s a quick line-by-line of what’s happening.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">'open-uri'</span>\n<span class=\"token keyword\">require</span> <span class=\"token string\">'nokogiri'</span></code></pre></div>\n<p>This requires the libraries we’ll be using to scrape Craigslist. Open-URI is\npart of Ruby’s standard library that is used for opening http, https, or ftp\nURLs as if they were files.</p>\n<p>As noted before, Nokogiri is the scraper that parses the HTML DOM to find the\nelements we’re looking for.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">url <span class=\"token operator\">=</span> <span class=\"token string\">'http://newyork.craigslist.org/search/pet?s=0'</span>\ndoc <span class=\"token operator\">=</span> <span class=\"token constant\">Nokogiri</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">HTML</span><span class=\"token punctuation\">(</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The <code class=\"language-text\">url</code> is given our ugly URL as a string. The <code class=\"language-text\">doc</code> variable utilizes the Nokogiri library to open the url variable.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">pets <span class=\"token operator\">=</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.hdrlnk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span>pet<span class=\"token operator\">|</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>pet<span class=\"token punctuation\">.</span>text<span class=\"token delimiter tag\">}</span></span> - <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>pet<span class=\"token punctuation\">.</span><span class=\"token function\">attribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'href'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to_s<span class=\"token delimiter tag\">}</span></span>\"</span> <span class=\"token punctuation\">}</span>\n\nputs pets<span class=\"token punctuation\">[</span><span class=\"token number\">0.</span><span class=\"token number\">.9</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>The real magic happens in this one-liner. First is <code class=\"language-text\">pets</code>: Nokogiri uses familiar CSS selectors to traverse the DOM. By calling the method <code class=\"language-text\">css</code> on <code class=\"language-text\">doc</code>, and passing in “a.hdrlnk”, we get a list of all elements that fit this pattern. Next we add these values to an array, adding the text of the <code class=\"language-text\">a.hrdlnk</code> element and the href attribute of the <code class=\"language-text\">a.hdrlnk</code> element. From there it’s a simple matter of printing the first ten links out to our terminal via <code class=\"language-text\">puts pets[0..9]</code>! Pretty straightforward, right?</p>\n<h3>Conclusion</h3>\n<p>Web scraping can get pretty ugly, having to traverse the DOM via xpath or CSS. It highlights an inherit problem with web scraping, and one you should note if you’re thinking about depending on an external site’s structure for your content: everything is dependent on how the site exists at the present moment. If for whatever reason Amazon decided to change how its sorting was done, or built its keywords using a different POST variable, we’d have to adjust our web scraper to accommodate. As long as we understand this, however, and don’t build a program dependent on another website’s structure, we should be okay.</p>","frontmatter":{"title":"Web scraping with Ruby and Nokogiri","date":null}}},"pageContext":{"slug":"web-scraping-with-ruby-and-nokogiri","type":"blog","jekyllDate":"2014-07-24"}}