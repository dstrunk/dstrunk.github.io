{"data":{"markdownRemark":{"html":"<p>I’m learning Emacs. There, I said it. After being a Vim user for about a year\nand a half, I’m going to try out the dark side. Here are some of the resources I\nam using to get my editor setup so it’s not so much “oh my god I don’t know how\nto exit out of this program” and more “okay, evil mode will save me if I get too\nin the deep end, but I’m giving this a shot”.</p>\n<ul>\n<li><a href=\"http://www.braveclojure.com/basic-emacs/\">How to Use Emacs, an Excellent Clojure Editor</a>. Great resource\nthat walks you through setting up your editor to resemble theirs. Borrow code,\nomit other parts, whatever. Fun note: Emacs is technically a Lisp interpreter,\nwith all of its editing functionality written in its own Lisp dialect, Emacs\nLisp. Perhaps this is why it’s intriguing to Clojurists as an editor…</li>\n<li><a href=\"http://magit.vc\">Magit</a>. Billed as “a git porcelain inside Emacs”. Comparing diffs is\neasy, and Magit has an interface for staging patches that is better than git’s\nown (self-proclaimed).</li>\n<li><a href=\"http://tuhdo.github.io/helm-intro.html\">Helm</a>. Helm is a completion engine that matches anywhere in a name,\ninstead of just the beginning (similar to CtrlP for us Vim users). Emacs\nships with a default similar package called <a href=\"https://www.emacswiki.org/emacs-test/InteractivelyDoThings\">Ido</a> as of version 22, but\nmany users prefer helm. Research both and see which one you like.</li>\n<li><a href=\"https://github.com/timcharper/evil-surround\">Evil-surround</a>. So I don’t go completely crazy, evil surround\nis there to ease my transition. I heavily use <a href=\"https://github.com/tpope/vim-surround\">surround.vim by tpope</a>,\nand evil-surround mimics that functionality.</li>\n<li><a href=\"https://github.com/wcsmith/evil-args\">Evil-args</a>. Another package to ease me into the water, evil args\nsets up motions and text objects similar to how Vim views method arguments.</li>\n<li><a href=\"https://github.com/hrs/sensible-defaults.el\">Sensible Defaults</a>. <a href=\"https://github.com/hrs\">Harry Schwartz</a>, of\n<a href=\"http://thoughtbot.com\">thoughtbot</a> ilk, while probably the only Emacs user in the\nthoughtbot company, follows thoughtbot’s standards of goodwill towards the\nopen source community. He’s open sourced sensible defaults for Emacs which\nmake the user more comfortable with this new and wonderous and frightening\neditor.</li>\n</ul>\n<h2>Miscellany</h2>\n<p>* I’ve been a pretty heavy Vim user for the last year and a half or so. Using Vim\nand Tmux (or a similar terminal multiplexer, e.g. screen), it’s possible to\nachieve a very fast workflow with a good testing feedback loop necessary for\nTDD. By working alongside the videos provided by the good folks over at\n<a href=\"https://upcase.com\">Upcase</a>, my editor has become home, a place where I feel comfortable\nmaking changes and seeing my results near-instantly. Check Upcase out today to\nlevel up your TDD, Vim, Git and Rails skills.</p>\n<p>** The Vim and Emacs camps are largely divided on which is the best editor. Vim\nusers joke that Emacs is a great operating system, lacking only a decent editor.\nEmacs users jest that Vim has two modes: “beep repetedly” and “break\neverything”. As two of the oldest continuously updated programs, it’s\nunderstandable why each editor has its zealots.</p>\n<p>*** This post was written in Vim. Whoops, maybe next time :)</p>","frontmatter":{"title":"Emacs","date":null}}},"pageContext":{"slug":"emacs","type":"blog","jekyllDate":"2016-02-09"}}