{"data":{"markdownRemark":{"html":"<p><em>This post is alternatively titled, “Why I will always hate Flash,” and details some issues I had with adding a Flash file to my asset pipeline in production.</em> My first non-tutorial Rails app is live! Well, technically live… Which is the best kind, if you ask me. There’s still a ton to do before it’s completely ready for production, but I’d like to touch on a hiccup I encountered when deploying the app to Heroku. One important part of the URL shortener I’m creating is the ability to automatically copy the URL generated to the user’s clipboard. After researching the matter a bit, I decided on the same method GitHub uses for their site—<a href=\"https://github.com/zeroclipboard/zeroclipboard\">ZeroClipboard</a>. I wanted to do things cleanly, so I added a flash folder to the asset pipeline. I then made sure to add the <code class=\"language-text\">flash</code> folder to my asset path: <code class=\"language-text\">config.assets.paths &lt;&lt; Rails.root.join(&#39;app&#39;, &#39;assets&#39;, &#39;flash&#39;)</code> After following the simple example on their GitHub’s README, I got ZeroClipboard working flawlessly on my local server. All good, right? Then came Heroku. I knew I’d have to configure a bit more to get static assets served with Heroku; <a href=\"https://devcenter.heroku.com/articles/rails-asset-pipeline\">their documentation</a> says as much. I took care to add the <code class=\"language-text\">rails_12factor</code> gem into my Gemfile to make sure all assets were added, but no dice; the ZeroClipboard flash file couldn’t be found when the app started. To troubleshoot, I fired up the Heroku bash console with <code class=\"language-text\">heroku run bash</code>. I listed all public assets with <code class=\"language-text\">ls public/assets</code> and … saw ZeroClipboard! Okay, the file was there, time to troubleshoot further. Next, I fired up the Heroku rails console via <code class=\"language-text\">heroku run rails console</code>. Within the production Rails console, I tried to list the helper path for ZeroClipboard: <code class=\"language-text\">puts helper.asset_path(&quot;ZeroClipboard.swf&quot;)</code>. That one gave me <strong>nil</strong>, so I knew it was an issue within Rails itself and not just a missing asset. Finally, I headed to StackOverflow to see if others had found similar issues. I found a thread where a person had problems with Heroku <a href=\"http://stackoverflow.com/questions/18324063/rails-4-images-not-loading-on-heroku\">serving images</a>. Among the solutions, the OP found that a combination of adding the gem <code class=\"language-text\">rails_12factor</code> (I’d already added it), and making sure <code class=\"language-text\">config.assets.compile</code> was set to true in production. Such an easy solution, but this proved to be the thing that made loading my Flash file load on Heroku. Hopes that helps anybody in a similar situation!</p>","frontmatter":{"title":"Serving uncommon assets on Heroku","date":null}}},"pageContext":{"slug":"serving-uncommon-assets-on-heroku","blogpath":"blog/2014/serving-uncommon-assets-on-heroku","type":"blog","jekyllDate":"2014-03-20"}}