{"data":{"markdownRemark":{"html":"<p>I recently decided to force myself into an immersion program with both\n<a href=\"https://www.gnu.org/software/emacs/\">Emacs</a> and <a href=\"https://elixir-lang.org\">Elixir</a>. I reformatted the machine I was using to\nlearn <a href=\"https://www.archlinux.org\">Arch Linux</a>, reinstalling with only the necessities—Emacs, Elixir,\nPhoenix, Node and Git.</p>\n<p>Instead of falling back on trusty Vim, I’m slowly accepting that I know nothing\non this machine and diving in. First up is Emacs—I can’t expect to get around\nin Elixir if I can’t move around in the text editor!</p>\n<p>At their cores, Emacs and Vim have one thing in common: users don’t know how to\nexit them when they first open them. For Vim, it ends up being <code class=\"language-text\">:q</code>, and, as I\nhave now learned, for Emacs, it’s <code class=\"language-text\">C-x C-c</code>, or control + x, control + c. Emacs\nis all about key chords, or two keys pressed simultaneously.</p>\n<p>With the idea of chords in mind, let’s get moving in Emacs. In Vim you’d use <code class=\"language-text\">h</code>,\n<code class=\"language-text\">j</code>, <code class=\"language-text\">k</code> and <code class=\"language-text\">l</code> to move left, down, up and right respectively. In Emacs, the\nidea is similar enough (the right way isn’t arrows, and if you do it wrong we\nwill all laugh at you). Here are the key combos:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">C-p <span class=\"token comment\"># up, or PREVIOUS</span>\nC-b <span class=\"token comment\"># BACK</span>\nC-f <span class=\"token comment\"># FORWARD</span>\nC-n <span class=\"token comment\"># down, or NEXT</span></code></pre></div>","frontmatter":{"title":"Get moving in Emacs as a Vim user","date":null}}},"pageContext":{"slug":"get-moving-in-emacs-as-a-vim-user","type":"blog"}}