{"data":{"markdownRemark":{"html":"<p>Erlang is a first-class citizen of Elixir. This isn’t a surprise; Elixir compiles down to BEAM, Erlang’s VM, which means we get to leverage the power of Erlang for free.</p>\n<p>We can see this functionality demonstrated in translating an Erlang library function into Elixir code. First, a look at the Erlang version:</p>\n<div class=\"gatsby-highlight\" data-language=\"erlang\"><pre class=\"language-erlang\"><code class=\"language-erlang\"><span class=\"token function\">client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n    <span class=\"token variable\">SomeHostInNet</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">% to make it runnable on one machine</span>\n    <span class=\"token punctuation\">{</span><span class=\"token atom\">ok</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">Sock</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token atom\">gen_tcp</span><span class=\"token punctuation\">:</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token variable\">SomeHostInNet</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5678</span><span class=\"token punctuation\">,</span>\n                                 <span class=\"token punctuation\">[</span><span class=\"token atom\">binary</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token atom\">packet</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token atom\">ok</span> <span class=\"token operator\">=</span> <span class=\"token atom\">gen_tcp</span><span class=\"token punctuation\">:</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token variable\">Sock</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Some Data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token atom\">ok</span> <span class=\"token operator\">=</span> <span class=\"token atom\">gen_tcp</span><span class=\"token punctuation\">:</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token variable\">Sock</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>Probably most important to note is the syntax for calling an Erlang library in Elixir: <code class=\"language-text\">:gen_tcp</code> (note the colon). This lets Elixir’s compiler know that a call to a native Erlang libary will be performed. Now, in Erlang:</p>\n<ul>\n<li><strong>Functions are indented until the end of the call</strong>. Functions in Elixir are wrapped in a <code class=\"language-text\">def &lt;functon&gt; do, end</code> block.</li>\n<li><strong>Multiline functions have commas, and the end of the function is terminated with a dot</strong>. Elixir doesn’t need any of these. Note that this is simplified for our example, but <a href=\"https://stackoverflow.com/questions/1110601/in-erlang-when-do-i-use-or-or\">this Stack Overflow question</a> has a good explanation of when to use semicolons, commas or periods in Erlang.</li>\n<li><strong>Variables are capitalized</strong>. Elixir variables are lowercase and snake case, so <code class=\"language-text\">SomeHostInNet</code> becomes <code class=\"language-text\">some_host_in_net</code>.</li>\n<li><strong>Comments start with a %</strong>. In Elixir comments use <code class=\"language-text\">#</code></li>\n<li><strong>Tuples look the same in Erlang vs Elixir</strong>. But looking at the first tuple in our Erlang function <code class=\"language-text\">{ok, Sock}</code>, <code class=\"language-text\">ok</code> is a symbol. In Elixir we prefix symbols with a colon, so <code class=\"language-text\">ok</code> becomes <code class=\"language-text\">:ok</code>. Note that the variable <code class=\"language-text\">Sock</code> will again become lowercased <code class=\"language-text\">sock</code>.</li>\n<li><strong>Library methods are called with the colon, e.g. <code class=\"language-text\">gen_tcp:connect</code></strong>. In Elixir methods are called with the dot, or <code class=\"language-text\">:gen_tcp.connect</code>.</li>\n</ul>\n<p>After converting the above, here is the Elixir implementation:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">def</span> client <span class=\"token keyword\">do</span>\n  some_host_in_net <span class=\"token operator\">=</span> <span class=\"token string\">\"localhost\"</span> <span class=\"token comment\"># to make it runnable on one machine</span>\n  <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> sock<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token atom symbol\">:gen_tcp</span><span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>some_host_in_net<span class=\"token punctuation\">,</span> <span class=\"token number\">5678</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>binary<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>packet<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token atom symbol\">:ok</span> <span class=\"token operator\">=</span> <span class=\"token atom symbol\">:gen_tcp</span><span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>sock<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token atom symbol\">:ok</span> <span class=\"token operator\">=</span> <span class=\"token atom symbol\">:gen_tcp</span><span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span>sock<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Once you understand some of the nuances of Erlang’s syntax, you can see that it’s a relatively straightforward exercise to convert methods between the two.</p>","frontmatter":{"title":"Using Erlang in Elixir","date":null}}},"pageContext":{"slug":"using-erlang-in-elixir","type":"blog","jekyllDate":"2017-07-29"}}