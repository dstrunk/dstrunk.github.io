{"data":{"markdownRemark":{"html":"<p>For the <a href=\"http://danielstrunk.me/blog/2016/02/09/emacs/\">last couple of months</a>, I’ve been attempting to adjust\nmy workflow to Emacs. The Elixir community seems really on board with Emacs,\nwith some notable vim users switching over (Chris McCord, developer of Elixir’s\nPhoenix framework, among others). And I really, honestly tried. But… I just\ncouldn’t do it.</p>\n<p>Below are some things I just missed <em>too much</em> that made me ultimately switch\nback.</p>\n<p>{% include shared/image.html name=“vim-tmux.gif” alt=“A sample of my workflow” %}</p>\n<h2>Tabs</h2>\n<p>Tabs are probably the number one reason I switched back. I use tabs in both tmux\nand in vim, and my workflow is incredibly dependent on then in both programs.</p>\n<h3>in tmux</h3>\n<p>In tmux, I’ll use tabs to keep a separate window for running a headless\nJavaScript server and a Rails or Phoenix server. That way I can edit files in\none tmux tab, and if anything goes amiss with an acceptance test, I can tab over\nto the servers to see exactly what the stacktrace error was.</p>\n<h3>in vim</h3>\n<p>In vim, it’s nice to have tabs for context switching. Especially when\nrefactoring, I’d like my tests to be alongside the class I’m refactoring in one\ntab, perhaps a configuration file and my routes in another, etc. I’m sure\nthere’s a way to simulate this behaviour in Emacs (the editor is incredibly\nextensible, I know), but I’d rather not have to install a plugin or write elisp\nto mimic the functionality I’m used to.</p>\n<h2>Terminal emulators vs a terminal</h2>\n<p>Perhaps my favorite thing about my configuration is its full integration with\nTmux, which allows me to create splits to have my editor on top and a\nfull-blown terminal on the bottom. Emacs has a terminal emulator, but it’s just\nthat—an emulator. My terminal is a bit customized, so things not running\nnatively tend to run a little strangely.</p>\n<p>And I like doing a lot of things in the terminal, to be honest. Though I have\n<a href=\"https://github.com/tpope/vim-fugitive\">tpope/vim-fugitive</a> for running Git commands within vim,\n<a href=\"https://github.com/janko-m/vim-test\">vim-test</a> for running tests within Rails or Phoenix projects, and\n<a href=\"https://github.com/tpope/vim-rails\">tpope’s vim-rails</a> for running Rails generations and migrations\nwithin vim, I’ll also jump into the terminal for more intensive work, such as\nrunning pry to test out a block, or doing some heavier git commands to blame or\npraise those who came before me :).</p>\n<p>80% of the time the emulator works fine, but that last 20% is enough of an\nannoyance to give me pause.</p>\n<h2>Multiple workspaces</h2>\n<p>Tmux makes it easy to create multiple workspaces. With <a href=\"https://github.com/dstrunk/dotfiles/blob/master/tmux/tmux.conf#L72\">this line in my tmux\ndotfiles</a>, I can press <code class=\"language-text\">C-s C-j</code> to bring up a list of all of\nworkspaces. Typing will present a fuzzy finder that filters results, which I can\nfurther navigate through by pressing <code class=\"language-text\">C-p</code> or <code class=\"language-text\">C-n</code> (up or down—those emacs\nkeybindings come in handy sometimes :).</p>\n<h2>Summary</h2>\n<p>In the end, things basically came down to muscle memory; my vim + tmux\nconfiguration is tested and true, and it’s been hacked to my preferences for\nabout two years now. Jumping into another editor brought out some pain\npoints I’d previously ironed out that I just didn’t feel like working through\nagain. In this case, tried and true beat out new and shiny for me.</p>\n<p>If you’re interested in my vim configuration, check out <a href=\"https://github.com/dstrunk/dotfiles\">my\ndotfiles!</a> The parts I’m most fond of reside in the <code class=\"language-text\">vim/</code> and <code class=\"language-text\">tmux/</code>\nfolders.</p>","frontmatter":{"title":"My old friend, Vim","date":null}}},"pageContext":{"slug":"my-old-friend-vim","blogpath":"blog/2016/my-old-friend-vim","type":"blog","jekyllDate":"2016-09-02"}}