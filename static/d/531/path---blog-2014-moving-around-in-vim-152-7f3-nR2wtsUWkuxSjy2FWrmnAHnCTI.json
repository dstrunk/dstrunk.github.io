{"data":{"markdownRemark":{"html":"<p>Happy Friday! Today I’ll touch on a major pain point for people first starting to learn Vim: navigating file structures! Let’s get started.</p>\n<h2>Splits</h2>\n<p>One of the frustrating things I first encountered when switching from Sublime Text to Vim was losing my beloved splits. But I didn’t lose them of course, I just didn’t know how to access them. Splits are just as easy (if not easier) as Sublime Text, we just have to know how to do it.</p>\n<p>To do splits in Vim, use the commands <code class=\"language-text\">:split</code> and <code class=\"language-text\">:vsplit</code>. Using the commands by themselves, you’ll open either a horizontal or vertical split within the folder structure of the other file you’ve got open. You can go straight to editing a file if you know what you’re looking for by typing <code class=\"language-text\">:split &lt;filename&gt;</code>.</p>\n<p>Of course as a Vim nerd, you’ll want to save keystrokes. The industrious of you might have already found that you can just type <code class=\"language-text\">:sp</code> or <code class=\"language-text\">:vsp</code> to take care of the same window splitting.</p>\n<h3>Moving around those splits</h3>\n<p>Well you’ve gotten the splits open, so now what? well, let’s move from side to side (Or up and down. Whatever.). to move from split to split, type <code class=\"language-text\">ctrl-w &lt;arrow key&gt;</code>. Nice!</p>\n<p>If you want faster keystrokes, you can edit your <code class=\"language-text\">.vimrc</code> as I have. This will allow you to press <code class=\"language-text\">ctrl + &lt;hjkl&gt;</code>, where <code class=\"language-text\">h</code> is left, <code class=\"language-text\">j</code> is down and so on. Just like we’re used to with navigating Vim typically. Here’s the setup for that:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&quot; Quicker window movement\nnnoremap &lt;C-j&gt; &lt;C-w&gt;j\nnnoremap &lt;C-k&gt; &lt;C-w&gt;k\nnnoremap &lt;C-h&gt; &lt;C-w&gt;h\nnnoremap &lt;C-l&gt; &lt;C-w&gt;l</code></pre></div>\n<p>While we’re editing our <code class=\"language-text\">.vimrc</code>, let’s also make it so new splits open to the right and bottom. That seems more natural.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&quot; Open new split panes to right and bottom\nset splitbelow\nset splitright</code></pre></div>\n<h3>Switching a split’s position</h3>\n<p>If you’re OCD like I am, you’ll want your spec either below your model / controller, or whatever your preference. To switch your splits up, type <code class=\"language-text\">ctrl-w R</code>. That will immediately move your bottom split to the top and vice versa (or left to right; whichever is the dominant split).</p>\n<h2>Conclusion</h2>\n<p>Of course that is the tip of the iceberg (as with all things Vim). Here are some other resources to help you move around Vim in a way you might be more used to with other editors:</p>\n<ul>\n<li><a href=\"https://www.cs.oberlin.edu/~kuperman/help/vim/windows.html\">https://www.cs.oberlin.edu/~kuperman/help/vim/windows.html</a></li>\n<li><a href=\"http://robots.thoughtbot.com/vim-splits-move-faster-and-more-naturally\">http://robots.thoughtbot.com/vim-splits-move-faster-and-more-naturally</a></li>\n</ul>","frontmatter":{"title":"Moving around in Vim","date":null}}},"pageContext":{"slug":"moving-around-in-vim","type":"blog"}}