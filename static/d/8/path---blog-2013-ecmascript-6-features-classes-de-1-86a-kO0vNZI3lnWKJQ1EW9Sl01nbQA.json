{"data":{"markdownRemark":{"html":"<p>Continuing my ES6 series, today we’re going to talk about classes. People coming from a more traditional programming background will already be familiar with classes, but for the uninitiated: a class is a representation of an object. A real world example might be: <strong>Vehicle</strong> is a class, and <strong>Car</strong> is an object within the Car class. Past iterations of JavaScript are like school in the summertime (no class). Instead, everything is an object. If you’ve read <a href=\"http://www.amazon.com/gp/product/0596517742/ref=as_li_ss_tl?ie=UTF8&#x26;camp=1789&#x26;creative=390957&#x26;creativeASIN=0596517742&#x26;linkCode=as2&#x26;tag=sa0c7-20\" title=\"Amazon - JavaScript: The Good Parts by Douglas Crockford\"><em>JavaScript: The Good Parts</em></a>, you might be familiar with the somewhat unintuitive way of implementing classes within JavaScript:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var Vehicle = function( name, year ) {\n\tthis.name = name;\n\tthis.year = year;\n};\n\nVehicle.prototype.about = function() {\n\treturn &quot;This vehicle&#39;s name is &quot; + this.name + &quot; and it was manufactured in &quot; + this.year;\n};</code></pre></div>\n<p>Using functions and prototypes, it’s possible to simulate a class in JavaScript. This somewhat confusing method changes (kind of; more on that later) in ECMAScript 6. Here’s how we’d implement the same Vehicle class:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Vehicle {\n\tconstructor( name, year ) {\n\t\tthis.name = name;\n\t\tthis.year = year;\n\t}\n\n\tsummary() {\n\t\treturn &quot;This vehicle&#39;s name is &quot; + this.name + &quot; and it was manufactured in &quot; + this.year;\n\t}\n}</code></pre></div>\n<p>Isn’t that easier to understand? I sure think so. This format also allows us to extend classes (create a new class that inherits all of the properties of the parent class). See below:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class SemiTruck extends Vehicle {\n\tconstructor( x, y ) {\n\t\tsuper( x, y );\n\t\tthis.wheels = 18;\n\t}\n}</code></pre></div>\n<p>The <code class=\"language-text\">super</code> function calls the constructor of the parent class so it can inherit all of its properties. I think it’s important to note that the class feature of Harmony is really just syntactic sugar; that is, it compiles down to functions and prototypes, just like we’re used to writing with current “classes”. Classes in JavaScript’s case isn’t about adopting standards set by Java; rather, it’s to make the developer’s code more readable and abstract away some of the mechanics of the language.</p>","frontmatter":{"title":"ECMAScript 6 features: classes","date":null}}},"pageContext":{"slug":"ecmascript-6-features-classes","type":"blog"}}