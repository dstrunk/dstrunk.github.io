{"data":{"markdownRemark":{"html":"<p>There are many ways people choose to create their Sass file structure, and it’s usually dependent on the environment the developer is comfortable with (Ruby,etc). Because I primarily work with WordPress, I thought it made sense to use a similar Sass file structure as is used in WordPress themes.  In my root sass folder, I only have one Sass source file, which imports all of my other files and serves as a primary entry point. Here’s my file structure:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- **stylesheet.scss**\n- vendor/\n- general/\n\t- _general.scss\n\t- _grid-settings.scss\n\t- _typography.scss\n\t- _variables.scss\n- layout/\n\t- header.scss\n\t- index.scss\n\t- footer.scss\n\t- page.scss\n\t- single.scss\n\t- archives.scss\n- media/\n\t- 1666.scss\n\t- 1200.scss\n\t- 1000.scss\n\t- 500.scss</code></pre></div>\n<p> The folder structure is pretty self-explanitory, but here’s the rundown: <strong>Vendor</strong> - this holds any vendor Sass files. I’m currently using <a href=\"http://bourbon.io/\" title=\"Sass Bourbon\">Bourbon</a> and <a href=\"http://neat.bourbon.io/\" title=\"Bourbon Neat\">Neat</a> to help create my scaffolding, so my file structure looks like this: - Vendor/ - Bourbon/ - Bourbon source files…</p>\n<ul>\n<li>Neat/ - Neat source files…</li>\n</ul>\n<p><strong>General</strong> - this folder is where I primarily work. It houses my CSS media query files under the <strong>Media</strong> folder, and my WP-centric layout CSS under the <strong>Layout</strong> folder. Any CSS that doesn’t fit within these two guidelines is underscored in the General folder, and primarily deals with extremely high-level CSS and / or general use mixins or variables that will be used in the <strong>Media</strong> / <strong>Layout</strong> folder files. I really like this setup, because I can set up my Stylesheet.scss (main entry point, remember?) to import everything just like a typical WordPress theme:</p>\n<ul>\n<li>first, import variables, vendor-specific mixins, resets, etc. which all kind of acts as a CSS version of functions.php.</li>\n<li>next, import the header</li>\n<li>now, the index</li>\n<li>now the archives, pages, and single posts</li>\n<li>finally the footer</li>\n<li>don’t forget your media queries!</li>\n</ul>\n<p>This setup makes it extremely easy change layouts quickly, adding colors or developing new custom page / post types: simply add a new module, include it in the stylesheet.scss, and you’re set. There’s more than one way to skin a cat, though, and this is only my recommendation. Regardless of which file structure you decide to land on, however, take one piece of my advice as gospel: developing a modular CSS workflow now will save you a lot of headaches in the future. For modular CSS design recommendations, I suggest studying popular grid frameworks such as <a href=\"https://github.com/twbs/bootstrap\" title=\"Twitter Bootstrap on Github\">Twitter Bootstrap</a>, or reading <em><a href=\"http://smacss.com/\" title=\"SMACCS\">Scalable and Modular Architecture for CSS</a></em> by Jonathan Snook.</p>","frontmatter":{"title":"Sass file structure in WordPress","date":null}}},"pageContext":{"slug":"sass-file-structure-in-wordpress","type":"blog"}}