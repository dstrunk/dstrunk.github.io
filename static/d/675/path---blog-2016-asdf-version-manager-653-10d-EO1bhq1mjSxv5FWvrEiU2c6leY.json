{"data":{"markdownRemark":{"html":"<p><em>First, the TL;DR: check out <a href=\"https://github.com/asdf-vm/adsf\">asdf</a>!</em></p>\n<p>I first began web development as a “PHP” developer (if it could be called that):\nediting and creating new WordPress themes and writing the ugliest procedural\ncode you could imagine. There were no worries of object-oriented programming\n(OOP), no opinions formed about which framework or language was the best or worst, no\neditor wars, nothing. Sometimes I miss those days :)</p>\n<p>Since then I’ve sampled lots of languages. Wanting to finally learn OOP, I tried both\nPython and Ruby before settling on Ruby. Interested in functional languages, I\ntried my hand at Scala and Haskell before landing on Elixir and Erlang. And of\ncourse, I’ve always had to deal with front-end development, so Node is\nperpetually installed on all machines. One thing all of these languages have in\ncommon? Your world can quickly fall apart when dealing with different language\nversions, packages and libraries between versions, and permissions among the\nlot. I can’t count the number of times permissions have tripped me up with gems\nand front end dependencies.</p>\n<p>If you aren’t a fan of firing up VMs for every single project or language\nyou want to sample, <code class=\"language-text\">asdf</code> is most likely for you.</p>\n<h2>Introduce asdf into your workflow</h2>\n<p><code class=\"language-text\">asdf</code> is the easiest package manager you’ll ever have to type (look ma, one\nhand!). If you are interested in sampling languages as I am, are working on a\nmachine that is less amenable to running a ton of VMs (whaddup macbook 12”?), or\nare working on several different frameworks across different language versions,\ncheck out asdf. Installing is simple:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Clone to $HOME/.asdf</span>\n<span class=\"token function\">git</span> clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.2.0\n\n<span class=\"token comment\"># For Ubuntu or other linux distros</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string\">'. <span class=\"token variable\">$HOME</span>/.asdf/asdf.sh'</span> <span class=\"token operator\">>></span> ~/.bashrc\n<span class=\"token keyword\">echo</span> <span class=\"token string\">'. <span class=\"token variable\">$HOME</span>/.asdf/completions/asdf.bash'</span> <span class=\"token operator\">>></span> ~/.bashrc\n\n<span class=\"token comment\"># OR for Mac OSX</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string\">'. <span class=\"token variable\">$HOME</span>/.asdf/asdf.sh'</span> <span class=\"token operator\">>></span> ~/.bash_profile\n<span class=\"token keyword\">echo</span> <span class=\"token string\">'. <span class=\"token variable\">$HOME</span>/.asdf/completions/asdf.bash'</span> <span class=\"token operator\">>></span> ~/.bash_profile</code></pre></div>\n<p>After installing asdf itself, you can begin installing plugins, which are then\nused to then install different versions of languages. For our next examples,\nI’ll be using Elixir as our language of choice. Assuming asdf is already\ninstalled, let’s install Elixir:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Add Elixir</span>\nasdf plugin-add elixir https://github.com/asdf-vm/asdf-elixir.git\n\n<span class=\"token comment\"># Add Elixir v. 1.3</span>\nadsf <span class=\"token function\">install</span> elixir 1.3.4</code></pre></div>\n<p>… And so on and so forth. If you want a global Elixir version, set it!</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">asdf global elixir 1.3.4</code></pre></div>\n<p>Running this command will add the version to <code class=\"language-text\">$HOME/.tool-versions</code>.</p>\n<h2>Add a local version to your project</h2>\n<p>Adding a language version to your project is super easy as well:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">asdf local elixir 1.3.4</code></pre></div>\n<p>This will add a <code class=\"language-text\">.tool-versions</code> file to your root directory. Inside the file is\nthe name of your language and the version (super easy, right?). This is great\nfor back-end languages, but I think it’s so much more necessary for front-end\ndevelopment (nodejs, I’m looking at you).</p>\n<h2>What about my language-specific package managers?</h2>\n<p>Look, rbenv is great. I used it for years! And, though not familiar, I’m sure\npyenv is great as well. As are others.</p>\n<p>… But …</p>\n<p>Why not one to rule them all? Not only does asdf have a ton of languages\nsupported already, but it has an API to allow for easily creating a new language\nof your choice.</p>\n<p>If you’re in a bind and can’t build out a new language implementation in\ntime, asdf’s got you covered as well. If you create a <code class=\"language-text\">.asdfrc</code> file your home\ndirectory with the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">legacy_version_file <span class=\"token operator\">=</span> <span class=\"token function\">yes</span></code></pre></div>\n<p>asdf will attempt to use your previous version manager’s defaults (if it is\nsupported as a language within asdf … which means you <em>do</em> have to add the\nlanguage before attempting this step). This means your <code class=\"language-text\">.ruby-version</code> files for\n<code class=\"language-text\">rbenv</code> will be supported in addition to asdf’s.</p>\n<p>If you’re still not convinced that asdf can replace rbenv / rvm / pyenv / exenv,\nconsider asdf’s ballad (which might not do much to convince you, but is great\nprose by the plugin’s author):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Once upon a time there was a programming language\nThere were many versions of it\nSo people wrote a version manager for it\nTo switch between versions for projects\nDifferent, old, new.\n\nThen there came more programming languages\nSo there came more version managers\nAnd many commands for them\n\nI installed a lot of them I learnt a lot of commands\n\nThen I said, just one more version manager\nWhich I will write instead\n\nSo, there came another version manager\nasdf version manager - https://github.com/HashNuke/asdf\n\nA version manager so extendable\nfor which anyone can create a plugin\nTo support their favourite language\nNo more installing more version managers\nOr learning more commands</code></pre></div>\n<p>I am <em>obviously</em> a fan of adsf, if only because of how many times I’ve been\nburned by this problem in the past. If you’re in a similar boat, give asdf a\ntry!</p>","frontmatter":{"title":"asdf version manager","date":"2016-11-25 14:00:00 -0500"}}},"pageContext":{"slug":"asdf-version-manager","blogpath":"blog/2016/asdf-version-manager","type":"blog","jekyllDate":"2016-11-25"}}